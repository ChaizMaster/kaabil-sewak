import React, { useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  SafeAreaView,
  ActivityIndicator,
} from 'react-native';
import * as Location from 'expo-location';

interface LocationPermissionScreenProps {
  onLocationGranted: (location: { latitude: number; longitude: number; address?: string }) => void;
  language: 'english' | 'hindi' | 'bengali';
  userName: string;
}

const translations = {
  english: {
    title: 'Enable Location',
    subtitle: 'Help us find jobs near you',
    welcome: 'Almost done',
    description: 'We need your location to show you relevant job opportunities in your area.',
    enableLocation: 'Enable Location',
    allowLocation: 'Allow Location Access',
    locationBenefits: 'Benefits of sharing location:',
    benefit1: 'ЁЯПа Get jobs near your area',
    benefit2: 'тЪб Faster job matching',
    benefit3: 'ЁЯЪЧ Reduced travel time',
    locationPermission: 'Location Permission',
    locationPermissionMessage: 'We need location permission to find jobs near you',
    locationError: 'Location Error',
    locationErrorMessage: 'Could not get your location. Please try again.',
  },
  hindi: {
    title: 'рд╕реНрдерд╛рди рд╕рдХреНрд╖рдо рдХрд░реЗрдВ',
    subtitle: 'рдЕрдкрдиреЗ рдЖрд╕-рдкрд╛рд╕ рдХреА рдиреМрдХрд░рд┐рдпрд╛рдВ рдЦреЛрдЬрдиреЗ рдореЗрдВ рд╣рдорд╛рд░реА рдорджрдж рдХрд░реЗрдВ',
    welcome: 'рд▓рдЧрднрдЧ рд╣реЛ рдЧрдпрд╛',
    description: 'рдЖрдкрдХреЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рдиреМрдХрд░реА рдХреЗ рдЕрд╡рд╕рд░ рджрд┐рдЦрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рд╣рдореЗрдВ рдЖрдкрдХреЗ рд╕реНрдерд╛рди рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред',
    enableLocation: 'рд╕реНрдерд╛рди рд╕рдХреНрд╖рдо рдХрд░реЗрдВ',
    allowLocation: 'рд╕реНрдерд╛рди рдкрд╣реБрдВрдЪ рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВ',
    locationBenefits: 'рд╕реНрдерд╛рди рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдХреЗ рдлрд╛рдпрджреЗ:',
    benefit1: 'ЁЯПа рдЕрдкрдиреЗ рдХреНрд╖реЗрддреНрд░ рдХреЗ рдкрд╛рд╕ рдХреА рдиреМрдХрд░рд┐рдпрд╛рдВ рдкрд╛рдПрдВ',
    benefit2: 'тЪб рддреЗрдЬрд╝ рдиреМрдХрд░реА рдореИрдЪрд┐рдВрдЧ',
    benefit3: 'ЁЯЪЧ рдпрд╛рддреНрд░рд╛ рдХрд╛ рд╕рдордп рдХрдо',
    locationPermission: 'рд╕реНрдерд╛рди рдХреА рдЕрдиреБрдорддрд┐',
    locationPermissionMessage: 'рдЖрдкрдХреЗ рдЖрд╕-рдкрд╛рд╕ рдХреА рдиреМрдХрд░рд┐рдпрд╛рдВ рдЦреЛрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рди рдХреА рдЕрдиреБрдорддрд┐ рдЪрд╛рд╣рд┐рдП',
    locationError: 'рд╕реНрдерд╛рди рддреНрд░реБрдЯрд┐',
    locationErrorMessage: 'рдЖрдкрдХрд╛ рд╕реНрдерд╛рди рдирд╣реАрдВ рдорд┐рд▓ рд╕рдХрд╛ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред',
  },
  bengali: {
    title: 'ржЕржмрж╕рзНржерж╛ржи рж╕ржХрзНрж░рж┐ржпрж╝ ржХрж░рзБржи',
    subtitle: 'ржЖржкржирж╛рж░ ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ ржЪрж╛ржХрж░рж┐ ржЦрзБржБржЬрзЗ ржкрзЗрждрзЗ ржЖржорж╛ржжрзЗрж░ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзБржи',
    welcome: 'ржкрзНрж░рж╛ржпрж╝ рж╢рзЗрж╖',
    description: 'ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛ржпрж╝ ржкрзНрж░рж╛рж╕ржЩрзНржЧрж┐ржХ ржЪрж╛ржХрж░рж┐рж░ рж╕рзБржпрзЛржЧ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп ржЖржорж╛ржжрзЗрж░ ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи ржкрзНрж░ржпрж╝рзЛржЬржиред',
    enableLocation: 'ржЕржмрж╕рзНржерж╛ржи рж╕ржХрзНрж░рж┐ржпрж╝ ржХрж░рзБржи',
    allowLocation: 'ржЕржмрж╕рзНржерж╛ржи ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕рзЗрж░ ржЕржирзБржорждрж┐ ржжрж┐ржи',
    locationBenefits: 'ржЕржмрж╕рзНржерж╛ржи рж╢рзЗржпрж╝рж╛рж░ ржХрж░рж╛рж░ рж╕рзБржмрж┐ржзрж╛:',
    benefit1: 'ЁЯПа ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ ржЪрж╛ржХрж░рж┐ ржкрж╛ржи',
    benefit2: 'тЪб ржжрзНрж░рзБржд ржЪрж╛ржХрж░рж┐ ржорзНржпрж╛ржЪрж┐ржВ',
    benefit3: 'ЁЯЪЧ ржнрзНрж░ржоржгрзЗрж░ рж╕ржоржпрж╝ ржХржо',
    locationPermission: 'ржЕржмрж╕рзНржерж╛ржирзЗрж░ ржЕржирзБржорждрж┐',
    locationPermissionMessage: 'ржЖржкржирж╛рж░ ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ ржЪрж╛ржХрж░рж┐ ржЦрзБржБржЬрждрзЗ ржЕржмрж╕рзНржерж╛ржирзЗрж░ ржЕржирзБржорждрж┐ ржкрзНрж░ржпрж╝рзЛржЬржи',
    locationError: 'ржЕржмрж╕рзНржерж╛ржи рждрзНрж░рзБржЯрж┐',
    locationErrorMessage: 'ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи ржкрзЗрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред',
  },
};

export const LocationPermissionScreen: React.FC<LocationPermissionScreenProps> = ({
  onLocationGranted,
  language,
  userName,
}) => {
  const [loading, setLoading] = useState(false);

  const t = translations[language];

  const requestLocationPermission = async () => {
    setLoading(true);
    try {
      // Request permission
      const { status } = await Location.requestForegroundPermissionsAsync();
      
      if (status !== 'granted') {
        Alert.alert(t.locationPermission, t.locationPermissionMessage);
        setLoading(false);
        return;
      }

      // Get current location
      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.Balanced,
      });

      // Optionally get address (reverse geocoding)
      try {
        const addressResponse = await Location.reverseGeocodeAsync({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
        });

        const address = addressResponse[0] ? 
          `${addressResponse[0].name || ''} ${addressResponse[0].city || ''} ${addressResponse[0].region || ''}`.trim() : 
          undefined;

        onLocationGranted({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
          address,
        });
      } catch (error) {
        // If address lookup fails, still proceed with coordinates
        onLocationGranted({
          latitude: location.coords.latitude,
          longitude: location.coords.longitude,
        });
      }
    } catch (error) {
      console.error('Error getting location:', error);
      Alert.alert(t.locationError, t.locationErrorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.welcome}>
            {t.welcome}, {userName}! ЁЯОЙ
          </Text>
          <Text style={styles.title}>{t.title}</Text>
          <Text style={styles.subtitle}>{t.subtitle}</Text>
          <Text style={styles.description}>{t.description}</Text>
        </View>

        {/* Location Benefits */}
        <View style={styles.benefitsContainer}>
          <Text style={styles.benefitsTitle}>{t.locationBenefits}</Text>
          <Text style={styles.benefitText}>{t.benefit1}</Text>
          <Text style={styles.benefitText}>{t.benefit2}</Text>
          <Text style={styles.benefitText}>{t.benefit3}</Text>
        </View>

        {/* Enable Location Button */}
        <TouchableOpacity
          style={[styles.enableButton, loading && styles.enableButtonDisabled]}
          onPress={requestLocationPermission}
          disabled={loading}
        >
          {loading ? (
            <>
              <ActivityIndicator color="#fff" size="small" style={{ marginRight: 8 }} />
              <Text style={styles.enableButtonText}>Getting Location...</Text>
            </>
          ) : (
            <>
              <Text style={styles.locationIcon}>ЁЯУН</Text>
              <Text style={styles.enableButtonText}>{t.enableLocation}</Text>
            </>
          )}
        </TouchableOpacity>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  content: {
    flex: 1,
    padding: 24,
    justifyContent: 'space-between',
  },
  header: {
    alignItems: 'center',
    paddingTop: 40,
  },
  welcome: {
    fontSize: 20,
    fontWeight: '600',
    color: '#007AFF',
    marginBottom: 16,
    textAlign: 'center',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginBottom: 16,
  },
  description: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    lineHeight: 20,
  },
  benefitsContainer: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 20,
    marginVertical: 20,
    borderWidth: 1,
    borderColor: '#e1e5e9',
  },
  benefitsTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 12,
  },
  benefitText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
    lineHeight: 20,
  },
  enableButton: {
    backgroundColor: '#007AFF',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
    shadowColor: '#007AFF',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 4,
    flexDirection: 'row',
    justifyContent: 'center',
  },
  enableButtonDisabled: {
    backgroundColor: '#ccc',
    shadowOpacity: 0,
    elevation: 0,
  },
  locationIcon: {
    fontSize: 20,
    marginRight: 8,
  },
  enableButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
}); 