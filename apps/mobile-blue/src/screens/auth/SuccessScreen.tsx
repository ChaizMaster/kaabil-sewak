import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  SafeAreaView,
  Alert,
  Platform,
} from 'react-native';
import Toast from 'react-native-toast-message';
import { MaterialIcons } from '@expo/vector-icons';
import authService from '../../services/authService';

interface SuccessScreenProps {
  onContinue: () => void;
  onSignOut: () => void;
  language: 'english' | 'hindi' | 'bengali';
}

const translations = {
  english: {
    title: "Success!",
    subtitle: "Authentication Successful!",
    welcome: "Welcome to Kaabil Sewak",
    phoneNumber: "Phone Number",
    userId: "User ID",
    lastLogin: "Last Login",
    continue: "Continue to App",
    signOut: "Sign Out",
    signOutConfirmTitle: "Sign Out",
    signOutConfirmMessage: "Are you sure you want to sign out?",
    cancel: "Cancel",
    signedOutToast: "Signed Out",
    signedOutToastMsg: "You have been signed out successfully",
    signOutFailedToast: "Sign Out Failed",
    signOutFailedToastMsg: "Please try again",
    debugTitle: "ЁЯФН Debug Information",
    debugFirebaseAuth: "Firebase Auth: Connected тЬЕ",
    debugSession: "Session: Stored securely тЬЕ",
    debugTesting: "Ready for manual testing! ЁЯЪА"
  },
  hindi: {
    title: "рд╕рдлрд▓!",
    subtitle: "рдкреНрд░рдорд╛рдгреАрдХрд░рдг рд╕рдлрд▓!",
    welcome: "рдХрд╛рдмрд┐рд▓ рд╕реЗрд╡рдХ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
    phoneNumber: "рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░",
    userId: "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдЖрдИрдбреА",
    lastLogin: "рдкрд┐рдЫрд▓рд╛ рд▓реЙрдЧрд┐рди",
    continue: "рдРрдк рдкрд░ рдЬрд╛рд░реА рд░рдЦреЗрдВ",
    signOut: "рд╕рд╛рдЗрди рдЖрдЙрдЯ рдХрд░реЗрдВ",
    signOutConfirmTitle: "рд╕рд╛рдЗрди рдЖрдЙрдЯ рдХрд░реЗрдВ",
    signOutConfirmMessage: "рдХреНрдпрд╛ рдЖрдк рдирд┐рд╢реНрдЪрд┐рдд рд░реВрдк рд╕реЗ рд╕рд╛рдЗрди рдЖрдЙрдЯ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
    cancel: "рд░рджреНрдж рдХрд░реЗрдВ",
    signedOutToast: "рд╕рд╛рдЗрди рдЖрдЙрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛",
    signedOutToastMsg: "рдЖрдк рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕рд╛рдЗрди рдЖрдЙрдЯ рд╣реЛ рдЧрдП рд╣реИрдВ",
    signOutFailedToast: "рд╕рд╛рдЗрди рдЖрдЙрдЯ рд╡рд┐рдлрд▓",
    signOutFailedToastMsg: "рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ",
    debugTitle: "ЁЯФН рдбрд┐рдмрдЧ рдЬрд╛рдирдХрд╛рд░реА",
    debugFirebaseAuth: "рдлрд╛рдпрд░рдмреЗрд╕ рдкреНрд░рдорд╛рдгреАрдХрд░рдг: рдЬреБрдбрд╝рд╛ рд╣реБрдЖ тЬЕ",
    debugSession: "рд╕рддреНрд░: рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рд╕рдВрдЧреНрд░рд╣реАрдд тЬЕ",
    debugTesting: "рдореИрдиреНрдпреБрдЕрд▓ рдкрд░реАрдХреНрд╖рдг рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░! ЁЯЪА"
  },
  bengali: {
    title: "рж╕рж╛ржлрж▓рзНржп!",
    subtitle: "ржкрзНрж░ржорж╛ржгрзАржХрж░ржг рж╕ржлрж▓!",
    welcome: "ржХрж╛ржмрж┐рж▓ рж╕рзЗржмржХрзЗ рж╕рзНржмрж╛ржЧрждржо",
    phoneNumber: "ржлрзЛржи ржиржорзНржмрж░",
    userId: "ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЖржЗржбрж┐",
    lastLogin: "рж╢рзЗрж╖ рж▓ржЧржЗржи",
    continue: "ржЕрзНржпрж╛ржкрзЗ ржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрж╛ржи",
    signOut: "рж╕рж╛ржЗржи ржЖржЙржЯ ржХрж░рзБржи",
    signOutConfirmTitle: "рж╕рж╛ржЗржи ржЖржЙржЯ ржХрж░рзБржи",
    signOutConfirmMessage: "ржЖржкржирж┐ ржХрж┐ ржирж┐рж╢рзНржЪрж┐ржд ржпрзЗ ржЖржкржирж┐ рж╕рж╛ржЗржи ржЖржЙржЯ ржХрж░рждрзЗ ржЪрж╛ржи?",
    cancel: "ржмрж╛рждрж┐рж▓ ржХрж░рзБржи",
    signedOutToast: "рж╕рж╛ржЗржи ржЖржЙржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ",
    signedOutToastMsg: "ржЖржкржирж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ рж╕рж╛ржЗржи ржЖржЙржЯ рж╣ржпрж╝рзЗржЫрзЗржи",
    signOutFailedToast: "рж╕рж╛ржЗржи ржЖржЙржЯ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗ",
    signOutFailedToastMsg: "ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи",
    debugTitle: "ЁЯФН ржбрж┐ржмрж╛ржЧ рждржерзНржп",
    debugFirebaseAuth: "ржлрж╛ржпрж╝рж╛рж░ржмрзЗрж╕ ржкрзНрж░ржорж╛ржгрзАржХрж░ржг: рж╕ржВржпрзБржХрзНржд тЬЕ",
    debugSession: "рж╕рзЗрж╢ржи: ржирж┐рж░рж╛ржкржжрзЗ рж╕ржВрж░ржХрзНрж╖рж┐ржд тЬЕ",
    debugTesting: "ржорзНржпрж╛ржирзБржпрж╝рж╛рж▓ ржкрж░рзАржХрзНрж╖рж╛рж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд! ЁЯЪА"
  }
};

export const SuccessScreen: React.FC<SuccessScreenProps> = ({
  onContinue,
  onSignOut,
  language,
}) => {
  const [userData, setUserData] = useState<any>(null);
  const t = translations[language];

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    try {
      const session = await authService.getUserSession();
      setUserData(session.userData);
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  };

  const handleSignOut = () => {
    Alert.alert(
      t.signOutConfirmTitle,
      t.signOutConfirmMessage,
      [
        {
          text: t.cancel,
          style: 'cancel',
        },
        {
          text: t.signOut,
          style: 'destructive',
          onPress: async () => {
            try {
              await authService.signOut();
              Toast.show({
                type: 'success',
                text1: t.signedOutToast,
                text2: t.signedOutToastMsg,
              });
              onSignOut();
            } catch (error) {
              console.error('Error signing out:', error);
              Toast.show({
                type: 'error',
                text1: t.signOutFailedToast,
                text2: t.signOutFailedToastMsg,
              });
            }
          },
        },
      ]
    );
  };

  const welcomeMessage = userData?.displayName ? `${t.welcome}, ${userData.displayName}!` : t.welcome;

  return (
    <SafeAreaView style={styles.container}>
      <View style={styles.content}>
        <View style={styles.mainContent}>
          <View style={styles.iconContainer}>
            <Text style={styles.successIcon}>ЁЯОЙ</Text>
          </View>

          <View style={styles.header}>
            <Text style={styles.title}>{t.title}</Text>
            <Text style={styles.subtitleEng}>{welcomeMessage}</Text>
          </View>
        </View>

        <View style={styles.actionsContainer}>
          <TouchableOpacity
            style={styles.continueButton}
            onPress={onContinue}
            activeOpacity={0.8}
          >
            <Text style={styles.buttonText}>{t.continue}</Text>
            <MaterialIcons name="arrow-forward-ios" size={20} color="#F0F4F8" style={styles.buttonArrowIcon} />
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.signOutButton}
            onPress={handleSignOut}
            activeOpacity={0.7}
          >
            <Text style={styles.signOutButtonText}>{t.signOut}</Text>
          </TouchableOpacity>
        </View>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0A192F',
  },
  content: {
    flex: 1,
    paddingHorizontal: 24,
    paddingVertical: 30,
    justifyContent: 'space-between',
  },
  mainContent: {
    alignItems: 'center',
    flexGrow: 1,
    justifyContent: 'center',
  },
  iconContainer: {
    alignItems: 'center',
    marginBottom: 25,
  },
  successIcon: {
    fontSize: 90,
  },
  header: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    fontSize: 38,
    fontWeight: 'bold',
    color: '#F055A8',
    marginBottom: 12,
    textAlign: 'center',
  },
  subtitleEng: {
    fontSize: 20,
    fontWeight: '500',
    color: '#F0F4F8',
    textAlign: 'center',
    paddingHorizontal: 20,
  },
  actionsContainer: {
    paddingBottom: 10,
  },
  continueButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(48, 79, 254, 0.8)',
    borderRadius: 18,
    paddingVertical: 18,
    minHeight: 60,
    borderWidth: 1,
    borderColor: 'rgba(240, 244, 248, 0.35)',
    marginBottom: 20,
  },
  signOutButton: {
    alignItems: 'center',
    paddingVertical: 12,
  },
  buttonArrowIcon: {
    marginLeft: 10,
  },
  buttonText: {
    fontSize: 19,
    fontWeight: 'bold',
    color: '#F0F4F8',
  },
  signOutButtonText: {
    fontSize: 15,
    fontWeight: '500',
    color: '#A0AEC0',
    textDecorationLine: 'underline',
  },
}); 