import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  ActivityIndicator,
} from 'react-native';
import authService from '../../services/authService';

interface LoginScreenProps {
  onNavigateToOTP: (phoneNumber: string) => void;
  onGoBack: () => void;
  language: 'english' | 'hindi' | 'bengali';
}

const translations = {
  english: {
    title: 'Welcome Back!',
    subtitle: 'Sign in to your account',
    phoneNumber: 'Mobile Number',
    phonePlaceholder: '98765 43210',
    sendOtp: 'Send OTP',
    helperText: 'We\'ll send you a 6-digit verification code',
    termsText: 'By continuing, you agree to our Terms of Service and Privacy Policy',
    back: '‚Üê Back',
    phoneRequired: 'Phone Number Required',
    phoneRequiredMsg: 'Please enter your phone number',
    invalidPhone: 'Invalid Phone Number',
    invalidPhoneMsg: 'Please enter a valid Indian mobile number',
    otpSent: 'OTP Sent!',
    otpSentMsg: 'Verification code sent to +91',
    failedToSend: 'Failed to Send OTP',
    networkError: 'Network Error',
    networkErrorMsg: 'Please check your internet connection',
  },
  hindi: {
    title: '‡§µ‡§æ‡§™‡§∏ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!',
    subtitle: '‡§Ö‡§™‡§®‡•á ‡§ñ‡§æ‡§§‡•á ‡§Æ‡•á‡§Ç ‡§≤‡•â‡§ó ‡§á‡§® ‡§ï‡§∞‡•á‡§Ç',
    phoneNumber: '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞',
    phonePlaceholder: '98765 43210',
    sendOtp: 'OTP ‡§≠‡•á‡§ú‡•á‡§Ç',
    helperText: '‡§π‡§Æ ‡§Ü‡§™‡§ï‡•ã 6-‡§Ö‡§Ç‡§ï‡•Ä‡§Ø ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§ï‡•ã‡§° ‡§≠‡•á‡§ú‡•á‡§Ç‡§ó‡•á',
    termsText: '‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡•á ‡§∏‡•á ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§ï‡•Ä ‡§∂‡§∞‡•ç‡§§‡•ã‡§Ç ‡§î‡§∞ ‡§ó‡•ã‡§™‡§®‡•Ä‡§Ø‡§§‡§æ ‡§®‡•Ä‡§§‡§ø ‡§∏‡•á ‡§∏‡§π‡§Æ‡§§ ‡§π‡•à‡§Ç',
    back: '‚Üê ‡§µ‡§æ‡§™‡§∏',
    phoneRequired: '‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï',
    phoneRequiredMsg: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
    invalidPhone: '‡§ó‡§≤‡§§ ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞',
    invalidPhoneMsg: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§µ‡•à‡§ß ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§Æ‡•ã‡§¨‡§æ‡§á‡§≤ ‡§®‡§Ç‡§¨‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
    otpSent: 'OTP ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ!',
    otpSentMsg: '‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§ï‡•ã‡§° ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ +91',
    failedToSend: 'OTP ‡§≠‡•á‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤',
    networkError: '‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø',
    networkErrorMsg: '‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§á‡§Ç‡§ü‡§∞‡§®‡•á‡§ü ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ú‡§æ‡§Ç‡§ö‡•á‡§Ç',
  },
  bengali: {
    title: '‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!',
    subtitle: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶∏‡¶æ‡¶á‡¶® ‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
    phoneNumber: '‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞',
    phonePlaceholder: '98765 43210',
    sendOtp: 'OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®',
    helperText: '‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡ß¨-‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡¶∞‡¶£ ‡¶ï‡ßã‡¶° ‡¶™‡¶æ‡¶†‡¶æ‡¶¨‡ßã',
    termsText: '‡¶ö‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶∂‡¶∞‡ßç‡¶§‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßã‡¶™‡¶®‡ßÄ‡¶Ø‡¶º‡¶§‡¶æ ‡¶®‡ßÄ‡¶§‡¶ø‡¶§‡ßá ‡¶∏‡¶Æ‡ßç‡¶Æ‡¶§ ‡¶π‡¶®',
    back: '‚Üê ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®',
    phoneRequired: '‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®',
    phoneRequiredMsg: '‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®',
    invalidPhone: '‡¶≠‡ßÅ‡¶≤ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞',
    invalidPhoneMsg: '‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡ßà‡¶ß ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®',
    otpSent: 'OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!',
    otpSentMsg: '‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á‡¶ï‡¶∞‡¶£ ‡¶ï‡ßã‡¶° ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá +91',
    failedToSend: 'OTP ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•',
    networkError: '‡¶®‡ßá‡¶ü‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø',
    networkErrorMsg: '‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®',
  },
};

export const LoginScreen: React.FC<LoginScreenProps> = ({ 
  onNavigateToOTP, 
  onGoBack, 
  language 
}) => {
  const [phoneNumber, setPhoneNumber] = useState('');
  const [loading, setLoading] = useState(false);

  const t = translations[language];

  const handlePhoneNumberChange = (text: string) => {
    // Remove non-numeric characters
    const cleaned = text.replace(/[^0-9]/g, '');
    setPhoneNumber(cleaned);
  };

  const formatPhoneDisplay = (number: string) => {
    // Format for display: 98765 43210
    if (number.length <= 5) return number;
    return `${number.slice(0, 5)} ${number.slice(5)}`;
  };

  const validateInput = () => {
    if (!phoneNumber) {
      Alert.alert(t.phoneRequired, t.phoneRequiredMsg);
      return false;
    }

    if (!authService.validateIndianPhoneNumber(phoneNumber)) {
      Alert.alert(t.invalidPhone, t.invalidPhoneMsg);
      return false;
    }

    return true;
  };

  const handleSendOTP = async () => {
    if (!validateInput()) return;

    setLoading(true);
    try {
      const result = await authService.sendOTP(phoneNumber);
      
      if (result.success) {
        Alert.alert(
          t.otpSent,
          `${t.otpSentMsg} ${formatPhoneDisplay(phoneNumber)}`,
          [{ text: 'OK', onPress: () => onNavigateToOTP(phoneNumber) }]
        );
      } else {
        Alert.alert(t.failedToSend, result.error || 'Please try again');
      }
    } catch (error) {
      console.error('Error sending OTP:', error);
      Alert.alert(t.networkError, t.networkErrorMsg);
    } finally {
      setLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView 
        style={styles.keyboardView}
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <View style={styles.content}>
          {/* Header */}
          <View style={styles.header}>
            <Text style={styles.title}>{t.title}</Text>
            <Text style={styles.subtitle}>{t.subtitle}</Text>
          </View>

          {/* Phone Input Section */}
          <View style={styles.inputSection}>
            <Text style={styles.inputLabel}>{t.phoneNumber}</Text>
            <View style={styles.phoneInputContainer}>
              <View style={styles.countryCode}>
                <Text style={styles.countryCodeText}>üáÆüá≥ +91</Text>
              </View>
              <TextInput
                style={styles.phoneInput}
                value={formatPhoneDisplay(phoneNumber)}
                onChangeText={handlePhoneNumberChange}
                placeholder={t.phonePlaceholder}
                placeholderTextColor="#999"
                keyboardType="phone-pad"
                maxLength={11} // 5 + space + 5
                autoFocus
              />
            </View>
            <Text style={styles.helperText}>
              {t.helperText}
            </Text>
          </View>

          {/* Send OTP Button */}
          <TouchableOpacity
            style={[styles.sendButton, loading && styles.sendButtonDisabled]}
            onPress={handleSendOTP}
            disabled={loading}
          >
            {loading ? (
              <ActivityIndicator color="#fff" size="small" />
            ) : (
              <Text style={styles.sendButtonText}>{t.sendOtp}</Text>
            )}
          </TouchableOpacity>

          {/* Terms */}
          <Text style={styles.termsText}>
            {t.termsText}
          </Text>

          {/* Back Button */}
          <TouchableOpacity onPress={onGoBack} style={styles.backButton}>
            <Text style={styles.backButtonText}>{t.back}</Text>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  keyboardView: {
    flex: 1,
  },
  content: {
    flex: 1,
    padding: 24,
    justifyContent: 'center',
  },
  header: {
    alignItems: 'center',
    marginBottom: 48,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#1a1a1a',
    marginBottom: 8,
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 18,
    color: '#666',
    textAlign: 'center',
  },
  inputSection: {
    marginBottom: 32,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 12,
  },
  phoneInputContainer: {
    flexDirection: 'row',
    borderWidth: 2,
    borderColor: '#e1e5e9',
    borderRadius: 12,
    backgroundColor: '#fff',
    overflow: 'hidden',
    marginBottom: 8,
  },
  countryCode: {
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#f1f3f4',
    borderRightWidth: 1,
    borderRightColor: '#e1e5e9',
    justifyContent: 'center',
  },
  countryCodeText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  phoneInput: {
    flex: 1,
    paddingHorizontal: 16,
    paddingVertical: 16,
    fontSize: 18,
    color: '#333',
    fontWeight: '500',
  },
  helperText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
  },
  sendButton: {
    backgroundColor: '#007AFF',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginBottom: 24,
    shadowColor: '#007AFF',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 4,
  },
  sendButtonDisabled: {
    backgroundColor: '#ccc',
    shadowOpacity: 0,
    elevation: 0,
  },
  sendButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: '600',
  },
  termsText: {
    fontSize: 12,
    color: '#888',
    textAlign: 'center',
    lineHeight: 16,
    marginBottom: 20,
  },
  backButton: {
    alignItems: 'center',
    paddingVertical: 12,
  },
  backButtonText: {
    fontSize: 16,
    color: '#007AFF',
    fontWeight: '500',
  },
}); 