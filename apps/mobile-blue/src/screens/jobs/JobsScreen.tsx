import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
} from 'react-native';
import { Language } from 'shared/src/types/user.types';
import { useTranslation } from 'shared/src/hooks/useTranslation';

interface JobsScreenProps {
  userLanguage: Language;
  userName?: string;
  userLocation?: {
    latitude: number;
    longitude: number;
    address?: string;
  };
  onProfilePress: () => void;
}

interface JobData {
  id: string;
  titleKey: keyof import('shared/src/localization/translations').Translations;
  descriptionKey: keyof import('shared/src/localization/translations').Translations;
  salary: number;
  distance: number;
}

// Sample job data with translation keys
const sampleJobs: JobData[] = [
  {
    id: '1',
    titleKey: 'constructionWorker',
    descriptionKey: 'constructionWorkerDesc',
    salary: 500,
    distance: 2.5,
  },
  {
    id: '2',
    titleKey: 'houseCleaning',
    descriptionKey: 'houseCleaningDesc',
    salary: 300,
    distance: 1.2,
  },
  {
    id: '3',
    titleKey: 'deliveryHelper',
    descriptionKey: 'deliveryHelperDesc',
    salary: 400,
    distance: 3.8,
  },
  {
    id: '4',
    titleKey: 'maintenanceWork',
    descriptionKey: 'maintenanceWorkDesc',
    salary: 450,
    distance: 1.8,
  },
  {
    id: '5',
    titleKey: 'kitchenHelper',
    descriptionKey: 'kitchenHelperDesc',
    salary: 350,
    distance: 3.2,
  },
];

// Legacy translations for JobsScreen specific text (to be deprecated)
const legacyTranslations = {
  [Language.ENGLISH]: {
    subtitle: 'Find the perfect job opportunity',
    noJobsYet: 'Setting up jobs for your area...',
    comingSoon: 'Job listings will be available soon!',
    locationInfo: 'Your location',
    profileIncomplete: 'Complete your profile to see more jobs',
    profile: 'Profile',
  },
  [Language.HINDI]: {
    subtitle: '‡§∏‡§π‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡§æ ‡§Ö‡§µ‡§∏‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç',
    noJobsYet: '‡§Ü‡§™‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡§æ‡§Ç ‡§∏‡•á‡§ü ‡§ï‡•Ä ‡§ú‡§æ ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç...',
    comingSoon: '‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡•Ä ‡§∏‡•Ç‡§ö‡•Ä ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§π‡•ã‡§ó‡•Ä!',
    locationInfo: '‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§®',
    profileIncomplete: '‡§Ö‡§ß‡§ø‡§ï ‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡§æ‡§Ç ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•Ä ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§™‡•Ç‡§∞‡•Ä ‡§ï‡§∞‡•á‡§Ç',
    profile: '‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤',
  },
  [Language.BENGALI]: {
    subtitle: '‡¶®‡¶ø‡¶ñ‡ßÅ‡¶Å‡¶§ ‡¶ö‡¶æ‡¶ï‡¶∞‡¶ø‡¶∞ ‡¶∏‡ßÅ‡¶Ø‡ßã‡¶ó ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®',
    noJobsYet: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ö‡¶æ‡¶ï‡¶∞‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...',
    comingSoon: '‡¶ö‡¶æ‡¶ï‡¶∞‡¶ø‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶π‡¶¨‡ßá!',
    locationInfo: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®',
    profileIncomplete: '‡¶Ü‡¶∞‡¶ì ‡¶ö‡¶æ‡¶ï‡¶∞‡¶ø ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®',
    profile: '‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤',
  },
};

export const JobsScreen: React.FC<JobsScreenProps> = ({
  userLanguage,
  userName,
  userLocation,
  onProfilePress,
}) => {
  const { t } = useTranslation(userLanguage);
  const legacy = legacyTranslations[userLanguage];

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView style={styles.content}>
        {/* Header with Profile Button */}
        <View style={styles.headerContainer}>
          <View style={styles.header}>
            <Text style={styles.title}>{t.jobsNearYou}</Text>
            <Text style={styles.subtitle}>{legacy.subtitle}</Text>
          </View>
          <TouchableOpacity style={styles.profileButton} onPress={onProfilePress}>
            <Text style={styles.profileButtonText}>üë§</Text>
            <Text style={styles.profileButtonLabel}>{legacy.profile}</Text>
          </TouchableOpacity>
        </View>

        {/* Location Info */}
        {userLocation && (
          <View style={styles.locationCard}>
            <Text style={styles.locationTitle}>üìç {legacy.locationInfo}</Text>
            <Text style={styles.locationText}>
              {userLocation.address || `${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`}
            </Text>
          </View>
        )}

        {/* Localized Job Cards */}
        <View style={styles.jobsList}>
          {sampleJobs.map((job) => (
            <TouchableOpacity key={job.id} style={styles.jobCard}>
              <View style={styles.jobHeader}>
                <Text style={styles.jobTitle}>{t[job.titleKey]}</Text>
                <Text style={styles.jobSalary}>‚Çπ{job.salary}{t.perDay}</Text>
              </View>
              <Text style={styles.jobDescription}>{t[job.descriptionKey]}</Text>
              <Text style={styles.jobLocation}>üìç {job.distance} {t.kmAway}</Text>
            </TouchableOpacity>
          ))}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F7',
  },
  content: {
    flex: 1,
    padding: 16,
  },
  headerContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 24,
    paddingTop: 16,
  },
  header: {
    flex: 1,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#222222',
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 16,
    color: '#888888',
  },
  profileButton: {
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 12,
    backgroundColor: '#FFFFFF',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E0E0E0',
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 3,
    elevation: 2,
  },
  profileButtonText: {
    fontSize: 20,
    marginBottom: 2,
    color: '#007AFF',
  },
  profileButtonLabel: {
    fontSize: 12,
    color: '#888888',
    fontWeight: '500',
  },
  locationCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderWidth: 1,
    borderColor: '#E0E0E0',
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 3,
    elevation: 2,
  },
  locationTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#222222',
    marginBottom: 4,
  },
  locationText: {
    fontSize: 14,
    color: '#888888',
  },
  jobsList: {
    marginBottom: 24,
  },
  jobCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#E0E0E0',
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 3,
    elevation: 2,
  },
  jobHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  jobTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#222222',
    flex: 1,
  },
  jobSalary: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#007AFF',
  },
  jobDescription: {
    fontSize: 14,
    color: '#888888',
    marginBottom: 8,
    lineHeight: 20,
  },
  jobLocation: {
    fontSize: 12,
    color: '#AAAAAA',
  },
}); 